<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java</title>
    <url>/2020/06/20/Java/</url>
    <content><![CDATA[<h1 id="Java开发"><a href="#Java开发" class="headerlink" title="Java开发"></a>Java开发</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><a id="more"></a>

<p>​    正文部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2020/06/25/docker/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>环境搭建</title>
    <url>/2020/06/25/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>基于gitlab+docker+k8s+paas</p>
<h2 id="1-准备虚拟机环境"><a href="#1-准备虚拟机环境" class="headerlink" title="1 准备虚拟机环境"></a>1 准备虚拟机环境</h2><p>三台centos虚拟机，使用VMware安装三个centos</p>
<p>账号密码  centos1 centos123 其余都是centos</p>
<p>root/centos</p>
<h2 id="2-准备jdk环境"><a href="#2-准备jdk环境" class="headerlink" title="2 准备jdk环境"></a>2 准备jdk环境</h2><p>先卸载centos上的openjdk</p>
<p>1.查看jdk，可以先使用java命令查看jdk版本等信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -qa |grep java</span></span><br></pre></td></tr></table></figure>

<p>2.使用命令卸载openjdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -e --nodeps + 每一个openjdk</span></span><br></pre></td></tr></table></figure>

<p>3.上传jdk8到centos的目录下并且解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar -zxvf jdk-8u162-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>4.配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile</span></span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">	JAVA_HOME=/usr/local/java/jdk1.8.0_162</span><br><span class="line">	CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">	PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">	export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure>

<p>5.重新加载配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure>

<p>5.执行命令检测jdk是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> java --version</span></span><br></pre></td></tr></table></figure>

<p>3 安装mysql</p>
<p>4 安装tomcat</p>
<p>上传tar包文件后解压文件，进入bin目录下，执行./start.sh，此时已经启动tomcat</p>
<p>但需要关闭防火墙。</p>
<p>centos7关闭防火墙 ，开放8080端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span></span><br></pre></td></tr></table></figure>

<p>5 安装redis</p>
<p>6 安装maven</p>
<p>解压后配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile 配置环境变量</span></span><br><span class="line">	export M2_HOME=/usr/local/maven/apache-maven-3.6.2/</span><br><span class="line">	export PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/profile 使环境变量生效</span></span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<h2 id="3-安装docker"><a href="#3-安装docker" class="headerlink" title="3 安装docker"></a>3 安装docker</h2><p>1.先安装gcc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>

<p>2.安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc c++</span><br></pre></td></tr></table></figure>

<p>3.执行卸载命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>4.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">alibaba镜像：</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>更新yum软件包索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br></pre></td></tr></table></figure>

<p>安装docker-ce</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>

<p>配置镜像加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.$ mkdir -p /etc/docker</span><br><span class="line">2.$ vim /etc/docker/daemon.json</span><br><span class="line">		&#123;"registry-mirrors":["http://hub-mirror.c.163.com"]&#125;</span><br><span class="line"><span class="meta">  $</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>检查docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef |grep docker -v grep</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it /myDataVolume: /dataVolumeContainer 镜像名 可读可写</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /宿主机绝对路径：/容器内绝对路径 ：ro 镜像名</span></span><br><span class="line">	只能向容器内写，容器内不能进行写操作</span><br></pre></td></tr></table></figure>

<p>ubuntu中粘贴不正常：</p>
<p>进入插入模式：：set paste </p>
<h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>查看lastest版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image inspect nginx:latest | grep -i version</span></span><br></pre></td></tr></table></figure>



<h4 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h4><p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh'</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">'192.168.73.129'</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">external_url</span> <span class="string">'http://192.168.73.129'</span></span><br><span class="line">          <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">2222</span></span><br><span class="line">          <span class="string">unicorn['port']</span> <span class="string">=</span> <span class="number">8888</span></span><br><span class="line">          <span class="string">nginx['listen_port']</span> <span class="string">=</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'8443:443'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'2222:22'</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure>



<p>密码：12345678</p>
<p>xiefeixiang 12345678 </p>
<h4 id="docker安装nexus"><a href="#docker安装nexus" class="headerlink" title="docker安装nexus"></a>docker安装nexus</h4><p>docker pull sonatype/nexus3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  nexus:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sonatype/nexus3</span><br><span class="line">    container_name: nexus</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:8081</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/local/docker/nexus/data:/nexus-data</span><br></pre></td></tr></table></figure>



<h4 id="docker安装jenkins"><a href="#docker安装jenkins" class="headerlink" title="docker安装jenkins"></a>docker安装jenkins</h4><p>1.搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search jenkins</span></span><br></pre></td></tr></table></figure>

<p>2.拉取镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull jenkins</span></span><br></pre></td></tr></table></figure>

<p>3.查看镜像，并启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name jenkins -p 8080:8080 -p 50000:50000 -v /usr/<span class="built_in">local</span>/jenkins:/var/jenkins_home -it -d jenkins:latest</span></span><br></pre></td></tr></table></figure>

<p>tip：</p>
<ol>
<li>/usr/local/jenkins代表本机中jenkins的目录，需要改变权限执行  chmod 777 /usr/local/jenkins </li>
</ol>
<p>jenkins 账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiefeixiang root xiefeixiang</span><br></pre></td></tr></table></figure>

<p>docker安装gitlab</p>
<p>启动容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d  -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /home/gitlab/config:/etc/gitlab -v /home/gitlab/logs:/var/<span class="built_in">log</span>/gitlab -v /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p：将容器内部端口向外映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name：命名容器名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</span></span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置http协议所使用的访问地址,不加端口号默认为80</span></span><br><span class="line">external_url 'http://192.168.73.131'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置ssh协议所使用的访问地址和端口</span></span><br><span class="line">gitlab_rails['gitlab_ssh_host'] = '192.168.73.131'</span><br><span class="line">gitlab_rails['gitlab_shell_ssh_port'] = 222 # 此端口是run时22端口映射的222端口</span><br></pre></td></tr></table></figure>



<p>重启容器</p>
<p>访问 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.73.131 </span><br><span class="line">账号：root 密码：xiefeixiang</span><br></pre></td></tr></table></figure>



<p>配置公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">'xiefeixiango@163.com'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "xiefeixiang"</span><br><span class="line">git config --global user.email "xiefeixiango@163.com"</span><br></pre></td></tr></table></figure>



<p>docker 安装jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 38080:8080 -p 50000:50000 --name jenkins --link gitlab:gitlab.william.com  -u root -v /opt/jenkins:/var/jenkins_home jenkinsci/jenkins:latest</span><br></pre></td></tr></table></figure>



<p>查docker日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker logs -f --tail=行数 containerId</span><br></pre></td></tr></table></figure>





<h4 id="spring-boot-docker使用"><a href="#spring-boot-docker使用" class="headerlink" title="spring-boot-docker使用"></a>spring-boot-docker使用</h4><p>使用idea使用docker</p>
<p>开启docker远程访问服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>修改文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H tcp:<span class="comment">//0.0.0.0:2375 -H unix:///var/run/docker.sock</span></span><br></pre></td></tr></table></figure>

<p>重新加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

<p>查看端口是否开启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -nlpt</span><br></pre></td></tr></table></figure>

<p>setting设置docker远程地址<br>tcp://remoteip:2375，测试连接成功即可。</p>
<p>在pom文件中编写docker相关的信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.profix</span>&gt;</span>xiefeixiang<span class="tag">&lt;/<span class="name">docker.image.profix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--不需要dockerfile的方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--绑定Docker 命令到 Maven 各个阶段--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--解释：我们可以把 Docker 分为 build、tag、push，然后分别绑定 Maven 的 package、deploy 阶段--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--要生成的镜像名和版本 xiefeixiang/docker--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.profix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指定标签--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--基础镜像,相当于 Dockerfile 中的 from,指定基础镜像Java 1.8--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指定制作镜像的个人信息--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">maintainer</span>&gt;</span>xiefeixiango@163.com<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--切换到root目录--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">workdir</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">workdir</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cmd</span>&gt;</span>["java","-version"]<span class="tag">&lt;/<span class="name">cmd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- 指定Dockerfile路径</span></span><br><span class="line"><span class="comment">                    &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/src/main/docker&lt;/dockerDirectory&gt;</span></span><br><span class="line"><span class="comment">                   --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指定远程docker api地址--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.73.131:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--复制jar包到docker容器指定目录配置--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指定需要复制的根目录，$&#123;project.build.directory&#125; 表示target目录--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--指定需要复制的文件，$&#123;project.build.finalName&#125;.jar 指的是打包后的jar文件--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--这里将插件绑定在package这个操作上。也就是说，用户只需执行mvn package ，就会自动执行mvn package docker:build--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--&lt;goal&gt;push&lt;/goal&gt; --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行mvn:package即可在远程生成相关的镜像，启动容器，即成功。</p>
<p>如果是传统的war文件：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8</span> <span class="comment">#引入基础镜像</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT <span class="comment">#指定工作目录</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf * <span class="comment">#删除指定目录下的所有文件</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .zip  /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT <span class="comment">#复制到root目录下</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip .zip <span class="comment">#解压文件</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf  .zip <span class="comment">#移除掉多余的压缩包</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/tomcat <span class="comment">#指定回工作目录</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ccc7a11d65b1     （这串数字是我已经创建好一个ubuntu镜像的镜像id，在这里作为tomcat的基础镜像</span><br><span class="line"><span class="keyword">MAINTAINER</span> hmk</span><br><span class="line"><span class="keyword">ENV</span> REFRESHED_AT <span class="number">2018</span>-<span class="number">03</span>-<span class="number">10</span>  （这个环境变量用来表名该镜像模板的最后更新时间）</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换镜像目录，进入/usr目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="comment">#在/usr/下创建jdk目录,用来存放jdk文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir jdk</span></span><br><span class="line"><span class="comment">#在/usr/下创建tomcat目录，用来存放tomcat</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将宿主机的jdk目录下的文件拷至镜像的/usr/jdk目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk1.8.0_131 /usr/jdk/</span></span><br><span class="line"><span class="comment">#将宿主机的tomcat目录下的文件拷至镜像的/usr/tomcat目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-7.0.81 /usr/tomcat/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/jdk</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME=$JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH=/sbin:$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#公开端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#设置启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/tomcat/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span></span><br></pre></td></tr></table></figure>





<h4 id="centos7防火墙关闭"><a href="#centos7防火墙关闭" class="headerlink" title="centos7防火墙关闭"></a>centos7防火墙关闭</h4><p>查看防火墙状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<p>启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>

<p>查看所有打开的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --list-ports</span><br></pre></td></tr></table></figure>

<p>添加一个端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">80</span>/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>删除一个端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --remove-port=<span class="number">80</span>/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>更新防火墙规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>重启防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>



<h4 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h4><p>1、拉取镜像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p>1、启动容器（密码：redis）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">6379</span>:<span class="number">6379</span> -v /usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf -v /usr/local/redis/data:/data --name docker-redis docker.io/redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass <span class="string">"redis"</span></span><br></pre></td></tr></table></figure>

<p>3、进入容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker exec -it containerId redis-cli</span><br></pre></td></tr></table></figure>

<p>4.授权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth redis（密码redis）</span><br></pre></td></tr></table></figure>

<p>5、远程登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure>





<p>mysql远程登录</p>
<p>1、工具登陆</p>
<p>2、mysql -h [host] -u [username] -p [password]</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql - h 192.168.73.147 -u root -p (root)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker    docker exec -it 0a0e73713b20 redis-cli</span><br></pre></td></tr></table></figure>



<p>docker安装rabbitmq</p>
<p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:management</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">rabbit</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br></pre></td></tr></table></figure>



<p>执行：</p>
<p>docker-compose up -d</p>
<p>开放端口：</p>
<h4 id="docker安装mongodb"><a href="#docker安装mongodb" class="headerlink" title="docker安装mongodb"></a>docker安装mongodb</h4><p>1、拉取镜像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<p>2、启动容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo docker run -p <span class="number">27017</span>:<span class="number">27017</span> -v /usr/local/mongodb:/data/db -d mongo</span><br></pre></td></tr></table></figure>

<p>3、拉取mongodb管理工具：mongo-express</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker pull mongo-express</span><br></pre></td></tr></table></figure>

<p>4、启动服务（admin/pass）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo docker run -it  -p <span class="number">8088</span>:<span class="number">8081</span> --link <span class="number">24492e85</span>b012:mongo mongo-express</span><br></pre></td></tr></table></figure>

<p>5.访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//192.168.73.134:8088/</span></span><br></pre></td></tr></table></figure>



<h4 id="使用-mongoclient-管理-mongodb"><a href="#使用-mongoclient-管理-mongodb" class="headerlink" title="使用 mongoclient 管理 mongodb"></a>使用 mongoclient 管理 mongodb</h4><p>1、拉去镜像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker pull mongoclient/mongoclient</span><br></pre></td></tr></table></figure>

<p>2、启动容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo docker run --name mongoclient -d -p <span class="number">3000</span>:<span class="number">3000</span> -e MONGO_URL=mongodb:<span class="comment">//&lt;宿主机IP地址&gt;:27017/ mongoclient/mongoclient</span></span><br></pre></td></tr></table></figure>

<p>3、访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//&lt;宿主机IP地址&gt;:3000</span></span><br></pre></td></tr></table></figure>







<h4 id="spring-cloud启动顺序"><a href="#spring-cloud启动顺序" class="headerlink" title="spring-cloud启动顺序"></a>spring-cloud启动顺序</h4><p>先启动服务注册和发现，再启动分布式配置中心，再启动服务提供者，服务消费者，API网管</p>
<p>eureka</p>
<p>config</p>
<p>zipkin</p>
<p>admin</p>
<p>问题汇总：</p>
<p>如果遇到找不到主类：执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<p>看内存</p>
<p>free -m</p>
<h4 id="docker查看日志"><a href="#docker查看日志" class="headerlink" title="docker查看日志"></a>docker查看日志</h4><p>通过docker logs命令可以查看容器的日志。</p>
<p>docker logs -f -t –tail 100 datacenter</p>
<p><strong>命令格式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker logs [OPTIONS] CONTAINER</span><br><span class="line">  Options:</span><br><span class="line">        --details        显示更多的信息</span><br><span class="line">    -f, --follow         跟踪实时日志</span><br><span class="line">        --since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）</span><br><span class="line">        --tail string    从日志末尾显示多少行日志， 默认是all</span><br><span class="line">    -t, --timestamps     显示时间戳</span><br><span class="line">        --until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）</span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<p>查看指定时间后的日志，只显示最后100行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker logs -f -t --since&#x3D;&quot;2018-02-08&quot; --tail&#x3D;100 CONTAINER_ID</span><br></pre></td></tr></table></figure>

<p>查看最近30分钟的日志:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker logs --since 30m CONTAINER_ID</span><br></pre></td></tr></table></figure>

<p>查看某时间之后的日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker logs -t --since&#x3D;&quot;2018-02-08T13:23:37&quot; CONTAINER_ID</span><br></pre></td></tr></table></figure>

<p>查看某时间段日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker logs -t --since&#x3D;&quot;2018-02-08T13:23:37&quot; --until &quot;2018-02-09T12:23:37&quot; CONTAINER_ID</span><br></pre></td></tr></table></figure>

<h4 id="docker环境搭建简单的elk日志处理系统"><a href="#docker环境搭建简单的elk日志处理系统" class="headerlink" title="docker环境搭建简单的elk日志处理系统"></a>docker环境搭建简单的elk日志处理系统</h4><p>1、先拉取镜像 版本选择7.1.1</p>
<p>elasticsearch</p>
<p>logstash</p>
<p>kibana</p>
<p>1、安装docker-compose</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.17.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line">2、sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>

<p>2、docker-compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: '2.2'</span><br><span class="line">services:</span><br><span class="line">elasticsearch:</span><br><span class="line">image: docker.elastic.co/elasticsearch/elasticsearch:7.1.1</span><br><span class="line">container_name: elasticsearch7.1.1</span><br><span class="line">environment:</span><br><span class="line">- discovery.type=single-node</span><br><span class="line">- "ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br><span class="line">volumes:</span><br><span class="line">- esdata:/usr/share/elasticsearch/data</span><br><span class="line">hostname: elasticsearch</span><br><span class="line">restart: always</span><br><span class="line">ports:</span><br><span class="line">- 9200:9200</span><br><span class="line">- 9300:9300</span><br><span class="line">kibana:</span><br><span class="line">image: docker.elastic.co/kibana/kibana:7.1.1</span><br><span class="line">container_name: kibana7.1.1</span><br><span class="line">environment:</span><br><span class="line">- elasticsearch.hosts=http://elasticsearch:9200</span><br><span class="line">hostname: kibana</span><br><span class="line">depends_on:</span><br><span class="line">- elasticsearch</span><br><span class="line">restart: always</span><br><span class="line">ports:</span><br><span class="line">- "5601:5601"</span><br><span class="line">logstash:</span><br><span class="line">image: docker.elastic.co/logstash/logstash:7.1.1</span><br><span class="line">container_name: logstash7.1.1</span><br><span class="line">hostname: logstash</span><br><span class="line">restart: always</span><br><span class="line">depends_on:</span><br><span class="line">- elasticsearch</span><br><span class="line">ports:</span><br><span class="line">- 9600:9600</span><br><span class="line">- 5044:5044</span><br><span class="line">volumes:</span><br><span class="line">esdata:</span><br><span class="line">driver: local</span><br></pre></td></tr></table></figure>





<p>运行elk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 5601:5601 -p 9200:9200 -p 5044:5044 -it -e ES_HEAP_SIZE="2g" -e LS_HEAP_SIZE="1g" --name elk sebp/elk</span><br></pre></td></tr></table></figure>

<p>查看启动情况：</p>
<p>端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat  -anput |grep 9200</span><br><span class="line">netstat  -anput |grep 5601</span><br><span class="line">netstat  -anput |grep 5044</span><br></pre></td></tr></table></figure>

<p>查看主机名，修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname kubernetes-master</span><br></pre></td></tr></table></figure>





<p>centos安装open-jdk11</p>
<p>1、下载jdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-11-openjdk</span><br></pre></td></tr></table></figure>

<p>2、查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>3、设置java-home</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which java</span><br></pre></td></tr></table></figure>

<p>4、如果是/usr/bin/java 、执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lr &#x2F;usr&#x2F;bin&#x2F;java</span><br></pre></td></tr></table></figure>

<p>输出应为：<code>/usr/bin/java -&gt; /etc/alternatives/java</code> </p>
<p>5、执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lrt &#x2F;etc&#x2F;alternatives&#x2F;java</span><br></pre></td></tr></table></figure>

<p>输出为：/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.6.10-1.el7_7.x86_64/bin/java</p>
<p>6、JAVA的安装路径为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib/jvm/java-11-openjdk-11.0.6.10-1.el7_7.x86_64/bin/java</span><br></pre></td></tr></table></figure>

<p>7、配置环境变量：</p>
<p>环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi  /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-11.0.3.7-0.el7_6.aarch64</span><br><span class="line">export JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>8、重新加载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure>





<p>登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名：xie</span><br><span class="line">密码：77y3SD4DVNSC</span><br><span class="line">网址：http:&#x2F;&#x2F;www.qfdmy.com</span><br></pre></td></tr></table></figure>





<p>项目环境搭建</p>
<p>准备：</p>
<p>192.168.73.147</p>
<p>mysql</p>
<p>redis</p>
<p>192.168.73.138</p>
<p>rabbitmq</p>
<p>学习进度：</p>
<h3 id="docker搭建elasticsearch-kibana简单测试环境"><a href="#docker搭建elasticsearch-kibana简单测试环境" class="headerlink" title="docker搭建elasticsearch+kibana简单测试环境"></a>docker搭建elasticsearch+kibana简单测试环境</h3><h3 id="1-ElasticSearch安装"><a href="#1-ElasticSearch安装" class="headerlink" title="1.ElasticSearch安装"></a>1.ElasticSearch安装</h3><h4 id="1-1-docker安装es"><a href="#1-1-docker安装es" class="headerlink" title="1.1 docker安装es"></a>1.1 docker安装es</h4><p>要使用es肯定是需要安装的，由于用惯了docker，所以也想在docker上尝试一下，主要是因为我的好多软件都以及选择了docker。docker安装其实是很简单的，至于要一行命令即可。这里我选择的是es的7.6.2版本镜像镜像安装，具体安装命令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<p>敲完命令以后回车，只需要等带镜像下载完成就可以了。</p>
<h4 id="1-2-启动es"><a href="#1-2-启动es" class="headerlink" title="1.2 启动es"></a>1.2 启动es</h4><p>安装完成以后当然需要去启动我们的es了，这里启动也是很方便的只需要一行命令即可。如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot;-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<p>这样es就启动好了。我们可以去检查es是否安装完成，可以输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:9200</span><br></pre></td></tr></table></figure>

<p>或者在浏览器中打开<a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200</a>这个网址，如果能看到以下信息则说明我们的es是已经安装好了的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;530dd7820315&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;7O0fjpBJTkmn_axwmZX0RQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;508c38a&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2019-06-20T15:54:18.811730Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.0.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是在服务器上安装，想要对外访问还必须打开你服务器的9200端口，然后将localhost换成你服务器的ip地址即可。</p>
<h4 id="1-3-修改配置，解决跨域访问问题"><a href="#1-3-修改配置，解决跨域访问问题" class="headerlink" title="1.3 修改配置，解决跨域访问问题"></a>1.3 修改配置，解决跨域访问问题</h4><p>首先进入到容器中，然后进入到指定目录修改<code>elasticsearch.yml</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it elasticsearch &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;</span><br><span class="line">vi elasticsearch.yml</span><br></pre></td></tr></table></figure>

<p>在elasticsearch.yml的文件末尾加上:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p>修改配置后重启容器即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<h4 id="1-4-安装ik分词器"><a href="#1-4-安装ik分词器" class="headerlink" title="1.4 安装ik分词器"></a>1.4 安装ik分词器</h4><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，再重启es即可。具体步骤如下:<br><strong>注意：</strong>elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启的时候会失败。可以在这查看所有版本，选择合适自己版本的右键复制链接地址即可。<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">点击这里</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;</span><br><span class="line">elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.6.2&#x2F;elasticsearch-analysis-ik-7.6.2.zip</span><br><span class="line">exit</span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<p>然后可以在kibana界面的<code>dev tools</code>中验证是否安装成功；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST test&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;你好我是东邪Jiafly&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不添加<code>&quot;analyzer&quot;: &quot;ik_max_word&quot;,</code>则是每个字分词，可以在下面kibana安装完成以后尝试一下。</p>
<h3 id="2-kibana安装"><a href="#2-kibana安装" class="headerlink" title="2.kibana安装"></a>2.kibana安装</h3><h4 id="2-1-docker安装kibana"><a href="#2-1-docker安装kibana" class="headerlink" title="2.1 docker安装kibana"></a>2.1 docker安装kibana</h4><p>同样适用docker安装kibana命令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>

<p>等待所有镜像下载完成即可。</p>
<h4 id="2-2-启动kibana"><a href="#2-2-启动kibana" class="headerlink" title="2.2 启动kibana"></a>2.2 启动kibana</h4><p>安装完成以后需要启动kibana容器，使用<code>--link</code>连接到elasticsearch容器，命令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kibana --link&#x3D;elasticsearch:test  -p 5601:5601 -d kibana:7.6.2</span><br><span class="line">docker start kibana</span><br></pre></td></tr></table></figure>

<p>启动以后可以打开浏览器输入<a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601</a>就可以打开kibana的界面了。</p>
<h3 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h3><p>经过以上步骤就安装好了es和kibana，是不是很简单？这就是docker的好用处之一，也是我比较钟爱docker的原因之一。当然docker远不止这些功能，更多的我们以后慢慢写到，总之肯定是都能用上的。哈哈</p>
<p>vagrant同步时间</p>
<p>在 虚拟机 的 ~/.bashrc 中加入一行：</p>
<p>sudo service ntp restart</p>
<p>搭建elasticsearch的环境</p>
<p>docker pull elasticsearch:7.4.2</p>
<p>docker pull kibana:7.4.2</p>
<p>查看虚拟机内存</p>
<p>free -m</p>
<p>创建目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">echo "http.host: 0.0.0.0"&gt;&gt;/mydata/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure>

<p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins -d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure>

<p>“Caused by: java.nio.file.AccessDeniedException: /usr/share/elasticsearch/da</p>
<p>data目录权限不足</p>
<p>chmod 777 /mydata/elasticsearch/data/</p>
<p>安装kibana</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.56.10:9200 -p 5601:5601 -d kibana:7.4.2</span><br></pre></td></tr></table></figure>



<p>开机启动容器</p>
<p> docker update elasticsearch –restart=always</p>
<p>cd /etc/sysconfig/network-scripts/</p>
<p>vi ifcfg-eth1</p>
<p>VAGRANT-BEGIN</p>
<p>The contents below are automatically generated by Vagrant. Do not modify.</p>
<p>NM_CONTROLLED=yes</p>
<p>BOOTPROTO=none<br>ONBOOT=yes<br>IPADDR=192.168.56.10<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.56.1<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br>DEVICE=eth1<br>PEERDNS=no</p>
<p>VAGRANT-END</p>
<p>service network restart</p>
<p>修改yum源</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS-Base-163.repo</a></p>
<p>缓存</p>
<p>yum makecache</p>
<p>搭建nginx</p>
<p>随便启动一个nginx，复制出配置</p>
<p> docker run -p 80:80 –name nginx -d nginx:1.10</p>
<p>docker container cp nginx:/etc/nginx .</p>
<p>mv nginx conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx -v /mydata/nginx/html:/usr/share/nginx/html -v /mydata/nginx/logs:/var/log/nginx -v /mydata/nginx/conf:/etc/nginx -d nginx:1.10</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
</search>
